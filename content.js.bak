let selfTabDomains = []; 
let newTabDomains = []; 

let zKeyPressed = false;

function loadSettings() {
  chrome.storage.sync.get({
    selfTabDomains: 'bilibili.com',
    newTabDomains: ''
  }, (items) => {
    selfTabDomains = items.selfTabDomains.split('\n').filter(domain => domain.trim() !== '');
    newTabDomains = items.newTabDomains.split('\n').filter(domain => domain.trim() !== '');
    processLinks();
  });
}

function matchesDomain(url, domainList) {
  return domainList.some(domain => {
    const trimmedDomain = domain.trim();
    return trimmedDomain !== '' && url.includes(trimmedDomain);
  });
}

const observer = new MutationObserver((mutations) => {
  processLinks();
});

const config = { 
  childList: true, 
  subtree: true 
};

function processLinks() {
  const links = document.querySelectorAll('a');
  
  links.forEach(link => {
    const href = link.getAttribute('href');
    if (!href) return;
    
    const url = href.startsWith('/') ? window.location.origin + href : href;
    
    if (matchesDomain(url, selfTabDomains)) {
      link.setAttribute('target', '_self');
    } 
    else if (matchesDomain(url, newTabDomains)) {
      link.setAttribute('target', '_blank');
    }
  });
}

document.addEventListener('keydown', (event) => {
  if (event.key.toLowerCase() === 'z') {
    zKeyPressed = true;
  }
});

document.addEventListener('keyup', (event) => {
  if (event.key.toLowerCase() === 'z') {
    zKeyPressed = false;
  }
});

document.addEventListener('DOMContentLoaded', () => {
  loadSettings();
  
  observer.observe(document.body, config);
});

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    observer.observe(document.body, config);
  });
} else {
  loadSettings();
  observer.observe(document.body, config);
}

document.addEventListener('click', (event) => {
  const isForceSelfTabShortcut = zKeyPressed;
  
  let target = event.target;
  while (target && target.tagName !== 'A') {
    target = target.parentElement;
  }
  
  if (target && target.tagName === 'A') {
    const href = target.getAttribute('href');
    if (!href) return;
    
    const url = href.startsWith('/') ? window.location.origin + href : href;
    
    if (isForceSelfTabShortcut && target.getAttribute('target') === '_blank') {
      event.preventDefault();
      window.location.href = href;
      return;
    }
    
    if (matchesDomain(url, selfTabDomains) && target.getAttribute('target') === '_blank') {
      event.preventDefault();
      window.location.href = href;
    }
    else if (matchesDomain(url, newTabDomains) && target.getAttribute('target') !== '_blank') {
      target.setAttribute('target', '_blank');
    }
  }
}, true);

chrome.storage.onChanged.addListener((changes, namespace) => {
  if (namespace === 'sync') {
    if (changes.selfTabDomains) {
      selfTabDomains = changes.selfTabDomains.newValue.split('\n').filter(domain => domain.trim() !== '');
    }
    if (changes.newTabDomains) {
      newTabDomains = changes.newTabDomains.newValue.split('\n').filter(domain => domain.trim() !== '');
    }
    processLinks();
  }
}); 
